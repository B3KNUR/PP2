public class User {
    private String id;
    private String userName;
    private String email;
    private String password;
    private String role;

    public User(String id, String userName, String email, String password, String role) {
        this.id = id;
        this.userName = userName;
        this.email = email;
        this.password = password;
        this.role = role;
    }

    @Override
    public String toString() {
        return "User{" +
                "id='" + id + '\'' +
                ", name='" + userName + '\'' +
                ", email='" + email + '\'' +
                '}';
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;

        User user = (User) obj;
        return id.equals(user.id);
    }

    @Override
    public int hashCode() {
        return id.hashCode();
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getUserName() {
        return userName;
    }

    public void setUserName(String userName) {
        this.userName = userName;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public String getRole() {
        return role;
    }

    public void setRole(String role) {
        this.role = role;
    }
}
import java.sql.*;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;

public class Teacher implements Researcher {
    private String name;
    private String id;
    private String email;
    private String password;
    private String department;
    private List<Course> courses;
    private List<Complaint> complaints;
    private List<ResearchProject> researchProjects;
    private List<ResearchPaper> researchPapers;

    public Teacher(String name, String id, String email, String password, String department) {
        this.name = name;
        this.id = id;
        this.email = email;
        this.password = password;
        this.department = department;
        this.courses = new ArrayList<>();
        this.complaints = new ArrayList<>();
        this.researchProjects = new ArrayList<>();
        this.researchPapers = new ArrayList<>();
    }

    @Override
    public int calculateHIndex() {
        String query = "SELECT citations FROM research_papers WHERE teacher_id = ?";
        int hIndex = 0;

        try (Connection connection = DBConnection.getConnection();
             PreparedStatement pstmt = connection.prepareStatement(query)) {

            pstmt.setString(1, this.id);
            ResultSet rs = pstmt.executeQuery();

            while (rs.next()) {
                int citations = rs.getInt("citations");
                if (citations > hIndex) {
                    hIndex++;
                }
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return hIndex;
    }

    @Override
    public void addResearchProject(ResearchProject project) {
        String query = "INSERT INTO research_projects (topic) VALUES (?)";
        try (Connection connection = DBConnection.getConnection();
             PreparedStatement pstmt = connection.prepareStatement(query, Statement.RETURN_GENERATED_KEYS)) {

            pstmt.setString(1, project.getTopic());
            pstmt.executeUpdate();
            ResultSet generatedKeys = pstmt.getGeneratedKeys();

            if (generatedKeys.next()) {
                int projectId = generatedKeys.getInt(1);
                // связываем проект с учителем
                String linkQuery = "INSERT INTO researchers_projects (researcher_id, project_id) VALUES (?, ?)";
                try (PreparedStatement linkPstmt = connection.prepareStatement(linkQuery)) {
                    linkPstmt.setString(1, this.id);
                    linkPstmt.setInt(2, projectId);
                    linkPstmt.executeUpdate();
                }
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    @Override
    public List<ResearchProject> getResearchProjects() {
        List<ResearchProject> projects = new ArrayList<>();
        String query = "SELECT rp.topic FROM research_projects rp JOIN researchers_projects rrp ON rp.id = rrp.project_id WHERE rrp.researcher_id = ?";

        try (Connection connection = DBConnection.getConnection();
             PreparedStatement pstmt = connection.prepareStatement(query)) {

            pstmt.setString(1, this.id);
            ResultSet rs = pstmt.executeQuery();

            while (rs.next()) {
                ResearchProject project = new ResearchProject(rs.getString("topic"));
                projects.add(project);
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }

        return projects;
    }

    @Override
    public List<ResearchPaper> printPapers(Comparator<ResearchPaper> c) {
        List<ResearchPaper> papers = new ArrayList<>();
        String query = "SELECT * FROM research_papers WHERE teacher_id = ?";

        try (Connection connection = DBConnection.getConnection();
             PreparedStatement pstmt = connection.prepareStatement(query)) {

            pstmt.setString(1, this.id);
            ResultSet rs = pstmt.executeQuery();

            while (rs.next()) {
                ResearchPaper paper = new ResearchPaper(
                        rs.getString("title"),
                        // преобразуйте авторов в List<String> из строки
                        new ArrayList<>(),
                        rs.getString("journal"),
                        rs.getInt("citations"),
                        rs.getString("pages"),
                        rs.getString("doi"),
                        rs.getDate("publicationDate")
                );
                papers.add(paper);
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }

        papers.sort(c);
        return papers;
    }



    public void assignMark(Student student, int courseId, int mark) {
        String query = "INSERT INTO marks (student_id, course_id, mark) VALUES (?, ?, ?)";

        try (Connection connection = DBConnection.getConnection();
             PreparedStatement pstmt = connection.prepareStatement(query)) {

            pstmt.setString(1, student.getId());
            pstmt.setInt(2, courseId);
            pstmt.setInt(3, mark);
            pstmt.executeUpdate();
            System.out.println("Mark assigned successfully.");

        } catch (Exception e) {
            System.out.println("Failed to assign mark.");
            e.printStackTrace();
        }
    }

    public void sendComplaint(Student student, String urgencyLevel, String complaint) {
        String query = "INSERT INTO complaints (student_id, teacher_id, urgency_level, complaint) VALUES (?, ?, ?, ?)";

        try (Connection connection = DBConnection.getConnection();
             PreparedStatement pstmt = connection.prepareStatement(query)) {

            pstmt.setString(1, student.getId());
            pstmt.setString(2, this.id);
            pstmt.setString(3, urgencyLevel);
            pstmt.setString(4, complaint);
            pstmt.executeUpdate();
            System.out.println("Complaint sent successfully.");

        } catch (Exception e) {
            System.out.println("Failed to send complaint.");
            e.printStackTrace();
        }
    }

    public List<Course> viewCourses() {
        List<Course> courses = new ArrayList<>();
        String query = "SELECT * FROM courses WHERE teacher_id = ?";

        try (Connection connection = DBConnection.getConnection();
             PreparedStatement pstmt = connection.prepareStatement(query)) {

            pstmt.setString(1, this.id);
            ResultSet rs = pstmt.executeQuery();

            while (rs.next()) {
                Course course = new Course(
                        rs.getString("id"),
                        rs.getString("name"),
                        rs.getInt("credits")
                );
                courses.add(course);
            }

        } catch (Exception e) {
            System.out.println("Failed to retrieve courses.");
            e.printStackTrace();
        }

        return courses;
    }

    public List<Student> viewStudents() {
        List<Student> students = new ArrayList<>();
        String query = "SELECT s.id, s.name FROM students s JOIN enrollments e ON s.id = e.student_id WHERE e.course_id IN (SELECT id FROM courses WHERE teacher_id = ?)";

        try (Connection connection = DBConnection.getConnection();
             PreparedStatement pstmt = connection.prepareStatement(query)) {

            pstmt.setString(1, this.id);
            ResultSet rs = pstmt.executeQuery();

            while (rs.next()) {
                Student student = new Student(
                        rs.getString("id"),
                        rs.getString("firstName"),
                        rs.getString("lastName"),
                        rs.getString("email"),
                        rs.getString("major"),
                        rs.getInt("year"),
                        rs.getDouble("gpa")
                );
                students.add(student);
            }

        } catch (Exception e) {
            System.out.println("Failed to retrieve students.");
            e.printStackTrace();
        }

        return students;
    }

    public void addCourse(Course course) {
        String query = "INSERT INTO courses (name, credits, teacher_id) VALUES (?, ?, ?)";

        try (Connection connection = DBConnection.getConnection();
             PreparedStatement pstmt = connection.prepareStatement(query)) {

            pstmt.setString(1, course.getName());
            pstmt.setInt(2, course.getCredits());
            pstmt.setString(3, this.id);
            pstmt.executeUpdate();
            System.out.println("Course added successfully.");

        } catch (Exception e) {
            System.out.println("Failed to add course.");
            e.printStackTrace();
        }
    }

    public void manageCourse(int courseId, String newName, int newCredits) {
        String query = "UPDATE courses SET name = ?, credits = ? WHERE id = ? AND teacher_id = ?";

        try (Connection connection = DBConnection.getConnection();
             PreparedStatement pstmt = connection.prepareStatement(query)) {

            pstmt.setString(1, newName);
            pstmt.setInt(2, newCredits);
            pstmt.setInt(3, courseId);
            pstmt.setString(4, this.id);
            pstmt.executeUpdate();
            System.out.println("Course updated successfully.");

        } catch (Exception e) {
            System.out.println("Failed to manage course.");
            e.printStackTrace();
        }
    }

    public List<String> viewRequests() {
        List<String> requests = new ArrayList<>();
        String query = "SELECT request FROM course_requests WHERE teacher_id = ?";

        try (Connection connection = DBConnection.getConnection();
             PreparedStatement pstmt = connection.prepareStatement(query)) {

            pstmt.setString(1, this.id);
            ResultSet rs = pstmt.executeQuery();

            while (rs.next()) {
                requests.add(rs.getString("request"));
            }

        } catch (Exception e) {
            System.out.println("Failed to retrieve course requests.");
            e.printStackTrace();
        }

        return requests;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public String getDepartment() {
        return department;
    }

    public void setDepartment(String department) {
        this.department = department;
    }

    public List<Course> getCourses() {
        return courses;
    }

    public List<Complaint> getComplaints() {
        return complaints;
    }

    @Override
    public String toString() {
        return "Teacher{id=" + id + ", name=" + name + ", email=" + email + ", password=" + password + ", department=" + department;
    }
}
import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Comparator;

public class Student implements Researcher {
    private String id;
    private String firstName;
    private String lastName;
    private String email;
    private String major;
    private int year;
    private double gpa;
    private ResearchProject diplomaProject;
    private List<ResearchProject> researchProjects;
    private List<ResearchPaper> researchPapers;
    private List<Book> borrowedBooks;

    public Student(){};

    public Student(String id, String firstName, String lastName, String email, String major, int year, double gpa) {
        this.id = id;
        this.firstName = firstName;
        this.lastName = lastName;
        this.email = email;
        this.major = major;
        this.year = year;
        this.gpa = gpa;
        this.researchProjects = new ArrayList<>();
        this.researchPapers = new ArrayList<>();
    }

    @Override
    public int calculateHIndex() {
        String query = "SELECT citations FROM research_papers WHERE student_id = ?";
        int hIndex = 0;

        try (Connection connection = DBConnection.getConnection();
             PreparedStatement pstmt = connection.prepareStatement(query)) {

            pstmt.setString(1, this.id);
            ResultSet rs = pstmt.executeQuery();

            while (rs.next()) {
                int citations = rs.getInt("citations");
                if (citations > hIndex) {
                    hIndex++;
                }
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return hIndex;
    }

    @Override
    public void addResearchProject(ResearchProject project) {
        String query = "INSERT INTO research_projects (topic) VALUES (?)";
        try (Connection connection = DBConnection.getConnection();
             PreparedStatement pstmt = connection.prepareStatement(query, Statement.RETURN_GENERATED_KEYS)) {

            pstmt.setString(1, project.getTopic());
            pstmt.executeUpdate();
            ResultSet generatedKeys = pstmt.getGeneratedKeys();

            if (generatedKeys.next()) {
                int projectId = generatedKeys.getInt(1);
                String linkQuery = "INSERT INTO researchers_projects (researcher_id, project_id) VALUES (?, ?)";
                try (PreparedStatement linkPstmt = connection.prepareStatement(linkQuery)) {
                    linkPstmt.setString(1, this.id);
                    linkPstmt.setInt(2, projectId);
                    linkPstmt.executeUpdate();
                }
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    @Override
    public List<ResearchProject> getResearchProjects() {
        List<ResearchProject> projects = new ArrayList<>();
        String query = "SELECT rp.topic FROM research_projects rp JOIN researchers_projects rrp ON rp.id = rrp.project_id WHERE rrp.researcher_id = ?";

        try (Connection connection = DBConnection.getConnection();
             PreparedStatement pstmt = connection.prepareStatement(query)) {

            pstmt.setString(1, this.id);
            ResultSet rs = pstmt.executeQuery();

            while (rs.next()) {
                ResearchProject project = new ResearchProject(rs.getString("topic"));
                projects.add(project);
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }

        return projects;
    }

    public List<ResearchPaper> printPapers(Comparator<ResearchPaper> c) {
        List<ResearchPaper> papers = new ArrayList<>();
        String query = "SELECT * FROM research_papers WHERE student_id = ?";

        try (Connection connection = DBConnection.getConnection();
             PreparedStatement pstmt = connection.prepareStatement(query)) {

            pstmt.setString(1, this.id);
            ResultSet rs = pstmt.executeQuery();

            while (rs.next()) {
                ResearchPaper paper = new ResearchPaper(
                        rs.getString("title"),
                        // преобразуйте авторов в List<String> из строки
                        new ArrayList<>(),
                        rs.getString("journal"),
                        rs.getInt("citations"),
                        rs.getString("pages"),
                        rs.getString("doi"),
                        rs.getDate("publicationDate")
                );
                papers.add(paper);
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }

        papers.sort(c);
        return papers;
    }


    public String getId() {
        return id;
    }

    public String getFirstName() {
        return firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public String getEmail() {
        return email;
    }

    public String getMajor() {
        return major;
    }

    public int getYear() {
        return year;
    }

    public double getGpa() {
        return gpa;
    }

    public ResearchProject getDiplomaProject() {
        return diplomaProject;
    }

    public List<Book> getBorrowedBooks() {
        return borrowedBooks;
    }

    public void setId(String id) {
        this.id = id;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public void setMajor(String major) {
        this.major = major;
    }

    public void setYear(int year) {
        this.year = year;
    }

    public void setGpa(double gpa) {
        this.gpa = gpa;
    }

    public void setDiplomaProject(ResearchProject diplomaProject) {
        this.diplomaProject = diplomaProject;
    }

    public void borrowBook(User user, String code) {
        String checkAvailabilityQuery = "SELECT * FROM books WHERE code = ?";
        String borrowBookQuery = "INSERT INTO borrowed_books (book_id, user_id) VALUES (?, ?)";
        String updateBookAvailabilityQuery = "UPDATE books SET available = FALSE WHERE code = ?";

        try (Connection connection = DBConnection.getConnection();
             PreparedStatement checkStmt = connection.prepareStatement(checkAvailabilityQuery)) {

            checkStmt.setString(1, code);
            ResultSet rs = checkStmt.executeQuery();

            if (rs.next()) {
                boolean isAvailable = rs.getBoolean("available");
                int bookId = rs.getInt("id");

                if (isAvailable) {
                    try (PreparedStatement borrowStmt = connection.prepareStatement(borrowBookQuery);
                         PreparedStatement updateStmt = connection.prepareStatement(updateBookAvailabilityQuery)) {

                        connection.setAutoCommit(false);

                        borrowStmt.setInt(1, bookId);
                        borrowStmt.setString(2, user.getId());
                        borrowStmt.executeUpdate();

                        updateStmt.setString(1, code);
                        updateStmt.executeUpdate();

                        connection.commit();
                        System.out.println("Book borrowed successfully.");
                    } catch (Exception e) {
                        connection.rollback();
                        System.out.println("Error borrowing book. Transaction rolled back.");
                        e.printStackTrace();
                    } finally {
                        connection.setAutoCommit(true);
                    }
                } else {
                    System.out.println("Book is currently not available.");
                }
            } else {
                System.out.println("Book with code " + code + " not found.");
            }

        } catch (Exception e) {
            System.out.println("Failed to borrow book.");
            e.printStackTrace();
        }
    }

    public void returnBook(User user, String code) {
        String findBorrowedBookQuery = "SELECT bb.id FROM borrowed_books bb " +
                "JOIN books b ON bb.book_id = b.id " +
                "WHERE b.code = ? AND bb.user_id = ? AND bb.return_date IS NULL";
        String updateBorrowedBookQuery = "UPDATE borrowed_books SET return_date = CURRENT_TIMESTAMP WHERE id = ?";
        String updateBookAvailabilityQuery = "UPDATE books SET available = TRUE WHERE code = ?";

        try (Connection connection = DBConnection.getConnection();
             PreparedStatement findStmt = connection.prepareStatement(findBorrowedBookQuery)) {

            findStmt.setString(1, code);
            findStmt.setString(2, user.getId());
            ResultSet rs = findStmt.executeQuery();

            if (rs.next()) {
                int borrowedBookId = rs.getInt("id");

                try (PreparedStatement updateBorrowStmt = connection.prepareStatement(updateBorrowedBookQuery);
                     PreparedStatement updateBookStmt = connection.prepareStatement(updateBookAvailabilityQuery)) {

                    connection.setAutoCommit(false);

                    updateBorrowStmt.setInt(1, borrowedBookId);
                    updateBorrowStmt.executeUpdate();

                    updateBookStmt.setString(1, code);
                    updateBookStmt.executeUpdate();

                    connection.commit();
                    System.out.println("Book returned successfully.");
                } catch (Exception e) {
                    connection.rollback();
                    System.out.println("Error returning book. Transaction rolled back.");
                    e.printStackTrace();
                } finally {
                    connection.setAutoCommit(true);
                }
            } else {
                System.out.println("No borrowed record found for code " + code + ".");
            }

        } catch (Exception e) {
            System.out.println("Failed to return book.");
            e.printStackTrace();
        }
    }

    public List<Book> getBorrowedBooks(User user) {
        List<Book> borrowedBooks = new ArrayList<>();
        String query = "SELECT b.title, b.author, b.code, bb.borrow_date FROM borrowed_books bb " +
                "JOIN books b ON bb.book_id = b.id " +
                "WHERE bb.user_id = ? AND bb.return_date IS NULL";

        try (Connection connection = DBConnection.getConnection();
             PreparedStatement pstmt = connection.prepareStatement(query)) {

            pstmt.setString(1, user.getId());
            ResultSet rs = pstmt.executeQuery();

            while (rs.next()) {
                Book borrowedBook = new Book(
                        rs.getString("code"),
                        rs.getString("title"),
                        rs.getString("author")
                );
                borrowedBooks.add(borrowedBook);
            }

        } catch (Exception e) {
            System.out.println("Failed to retrieve borrowed books.");
            e.printStackTrace();
        }

        return borrowedBooks;
    }

    public void rateTeacher(Teacher teacher, int rating) {

        if (rating < 1 || rating > 5) {
            System.out.println("Rating must be between 1 and 5.");
            return;
        }

        String insertRatingQuery = "INSERT INTO teacher_ratings (teacher_id, student_id, rating) VALUES (?, ?, ?)";

        try (Connection connection = DBConnection.getConnection();
             PreparedStatement pstmt = connection.prepareStatement(insertRatingQuery)) {

            pstmt.setString(1, teacher.getId());
            pstmt.setString(2, this.id);
            pstmt.setInt(3, rating);

            int rowsInserted = pstmt.executeUpdate();
            if (rowsInserted > 0) {
                System.out.println("Rating submitted successfully.");
            } else {
                System.out.println("Failed to submit rating.");
            }

        } catch (Exception e) {
            System.out.println("An error occurred while submitting the rating.");
            e.printStackTrace();
        }
    }

    public void registerForCourse(Course course) {
        // Validate course availability
        String checkAvailabilityQuery = "SELECT available_slots FROM courses WHERE course_id = ?";
        String registerForCourseQuery = "INSERT INTO course_registrations (student_id, course_id) VALUES (?, ?)";
        String updateCourseSlotsQuery = "UPDATE courses SET available_slots = available_slots - 1 WHERE course_id = ?";

        try (Connection connection = DBConnection.getConnection();
             PreparedStatement checkStmt = connection.prepareStatement(checkAvailabilityQuery)) {

            checkStmt.setString(1, course.getId());
            ResultSet rs = checkStmt.executeQuery();

            if (rs.next()) {
                int availableSlots = rs.getInt("available_slots");

                if (availableSlots > 0) {
                    // Register the student for the course
                    try (PreparedStatement registerStmt = connection.prepareStatement(registerForCourseQuery);
                         PreparedStatement updateSlotsStmt = connection.prepareStatement(updateCourseSlotsQuery)) {

                        connection.setAutoCommit(false);

                        registerStmt.setString(1, this.id);
                        registerStmt.setString(2, course.getId());
                        registerStmt.executeUpdate();

                        updateSlotsStmt.setString(1, course.getId());
                        updateSlotsStmt.executeUpdate();

                        connection.commit();
                        System.out.println("Successfully registered for the course.");
                    } catch (Exception e) {
                        connection.rollback();
                        System.out.println("Error during registration. Transaction rolled back.");
                        e.printStackTrace();
                    } finally {
                        connection.setAutoCommit(true);
                    }
                } else {
                    System.out.println("No slots available for the course.");
                }
            } else {
                System.out.println("Course not found.");
            }

        } catch (Exception e) {
            System.out.println("Failed to register for the course.");
            e.printStackTrace();
        }
    }
}
import java.util.Comparator;
import java.util.List;

public interface Researcher {

    // Prints the research papers sorted using the given comparator
    //List<ResearchPaper> printPapers(Comparator<ResearchPaper> c);

    // Calculates the H-Index of the researcher
    int calculateHIndex();

    // Adds a research project to the researcher's list of projects
    void addResearchProject(ResearchProject project);

    // Retrieves the list of research projects
    List<ResearchProject> getResearchProjects();

    List<ResearchPaper> printPapers(Comparator<ResearchPaper> c);
}
import java.util.List;
import java.util.ArrayList;

class ResearchProject {
    private String topic;
    private List<Researcher> participants;
    private List<ResearchPaper> publishedPapers;

    public ResearchProject(String topic) {
        this.topic = topic;
        this.participants = new ArrayList<>();
        this.publishedPapers = new ArrayList<>();
    }

    public void addParticipant(Researcher researcher) {
        participants.add(researcher);
    }

    public void addPaper(ResearchPaper paper) {
        publishedPapers.add(paper);
    }

    public String getTopic() {
        return topic;
    }

    public void setTopic(String topic) {
        this.topic = topic;
    }

    public List<Researcher> getParticipants() {
        return participants;
    }

    public List<ResearchPaper> getPublishedPapers() {
        return publishedPapers;
    }
}
import java.util.Objects;
import java.util.Date;
import java.util.List;


class ResearchPaper {
    private String title;
    private List<String> authors;
    private String journal;
    private int citations;
    private String pages;
    private String doi;
    private Date publicationDate;
    private Format format;

    public ResearchPaper(String title, List<String> authors, String journal, int citations, String pages, String doi, Date publicationDate) {
        this.title = title;
        this.authors = authors;
        this.journal = journal;
        this.citations = citations;
        this.pages = pages;
        this.doi = doi;
        this.publicationDate = publicationDate;
    }

    //public getcitations

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        ResearchPaper that = (ResearchPaper) obj;
        return Objects.equals(doi, that.doi);
    }

    @Override
    public int hashCode() {
        return Objects.hash(doi);
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public List<String> getAuthors() {
        return authors;
    }

    public void setAuthors(List<String> authors) {
        this.authors = authors;
    }

    public String getJournal() {
        return journal;
    }

    public void setJournal(String journal) {
        this.journal = journal;
    }

    public int getCitations() {
        return citations;
    }

    public void setCitations(int citations) {
        this.citations = citations;
    }

    public String getPages() {
        return pages;
    }

    public void setPages(String pages) {
        this.pages = pages;
    }

    public String getDoi() {
        return doi;
    }

    public void setDoi(String doi) {
        this.doi = doi;
    }

    public Date getPublicationDate() {
        return publicationDate;
    }

    public void setPublicationDate(Date publicationDate) {
        this.publicationDate = publicationDate;
    }
}
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class News {
    private String title;
    private String content;
    private boolean isPinned;
    private List<String> comments;

    // Constructor
    public News(String title, String content) {
        this.title = title;
        this.content = content;
        this.isPinned = false;
        this.comments = new ArrayList<>();
    }

    // Getters
    public String getTitle() {
        return title;
    }

    public String getContent() {
        return content;
    }

    public boolean getIsPinned() {
        return isPinned;
    }

    public List<String> getComments() {
        return comments;
    }

    // Setters
    public void setTitle(String title) {
        this.title = title;
    }

    public void setContent(String content) {
        this.content = content;
    }

    public void setIsPinned(boolean isPinned) {
        this.isPinned = isPinned;
    }

    // Methods
    public void addComment(String comment) {
        comments.add(comment);
    }

    public void pinNews() {
        this.isPinned = true;
    }

    // JDBC Methods
    public void saveToDatabase() throws SQLException {
        String sql = "INSERT INTO News (title, content, isPinned) VALUES (?, ?, ?)";
        try (Connection connection = DBConnection.getConnection();
             PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setString(1, title);
            stmt.setString(2, content);
            stmt.setBoolean(3, isPinned);
            stmt.executeUpdate();
        }
    }

    public static News fetchFromDatabase(String title) throws SQLException {
        String sql = "SELECT * FROM News WHERE title = ?";
        try (Connection connection = DBConnection.getConnection();
             PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setString(1, title);
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    News news = new News(rs.getString("title"), rs.getString("content"));
                    news.setIsPinned(rs.getBoolean("isPinned"));
                    news.comments = fetchComments(title);
                    return news;
                }
            }
        }
        return null;
    }

    public static List<String> fetchComments(String newsTitle) throws SQLException {
        String sql = "SELECT comment FROM Comments WHERE news_title = ?";
        List<String> comments = new ArrayList<>();
        try (Connection connection = DBConnection.getConnection();
             PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setString(1, newsTitle);
            try (ResultSet rs = stmt.executeQuery()) {
                while (rs.next()) {
                    comments.add(rs.getString("comment"));
                }
            }
        }
        return comments;
    }

    public void addCommentToDatabase(String comment) throws SQLException {
        String sql = "INSERT INTO Comments (news_title, comment) VALUES (?, ?)";
        try (Connection connection = DBConnection.getConnection();
             PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setString(1, this.title);
            stmt.setString(2, comment);
            stmt.executeUpdate();
        }
        this.comments.add(comment);
    }
}
import java.sql.*;
import java.util.Date;

public class Message {
    private String sender;
    private String recipient;
    private String content;
    private Date timestamp;

    // Constructor
    public Message(String sender, String recipient, String content, Date timestamp) {
        this.sender = sender;
        this.recipient = recipient;
        this.content = content;
        this.timestamp = timestamp;
    }

    // Getters
    public String getSender() {
        return sender;
    }

    public String getRecipient() {
        return recipient;
    }

    public String getContent() {
        return content;
    }

    public Date getTimestamp() {
        return timestamp;
    }

    // Setter
    public void setContent(String content) {
        this.content = content;
    }

    // Method to format the message
    public String formatMessage() {
        return "From: " + sender + "\nTo: " + recipient + "\nTime: " + timestamp + "\nMessage: " + content;
    }

    // JDBC Methods
    public void saveToDatabase() throws SQLException {
        String sql = "INSERT INTO Messages (sender, recipient, content, timestamp) VALUES (?, ?, ?, ?)";
        try (Connection connection = DBConnection.getConnection();
             PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setString(1, sender);
            stmt.setString(2, recipient);
            stmt.setString(3, content);
            stmt.setTimestamp(4, new Timestamp(timestamp.getTime()));
            stmt.executeUpdate();
        }
    }

    public static Message fetchFromDatabase(int id) throws SQLException {
        String sql = "SELECT sender, recipient, content, timestamp FROM Messages WHERE id = ?";
        try (Connection connection = DBConnection.getConnection();
             PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setInt(1, id);
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    String sender = rs.getString("sender");
                    String recipient = rs.getString("recipient");
                    String content = rs.getString("content");
                    Date timestamp = new Date(rs.getTimestamp("timestamp").getTime());
                    return new Message(sender, recipient, content, timestamp);
                }
            }
        }
        return null;
    }

    public void updateContentInDatabase() throws SQLException {
        String sql = "UPDATE Messages SET content = ? WHERE sender = ? AND recipient = ? AND timestamp = ?";
        try (Connection connection = DBConnection.getConnection();
             PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setString(1, content);
            stmt.setString(2, sender);
            stmt.setString(3, recipient);
            stmt.setTimestamp(4, new Timestamp(timestamp.getTime()));
            stmt.executeUpdate();
        }
    }

    public void deleteFromDatabase() throws SQLException {
        String sql = "DELETE FROM Messages WHERE sender = ? AND recipient = ? AND timestamp = ?";
        try (Connection connection = DBConnection.getConnection();
             PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setString(1, sender);
            stmt.setString(2, recipient);
            stmt.setTimestamp(3, new Timestamp(timestamp.getTime()));
            stmt.executeUpdate();
        }
    }
}
public class Mark {
    private double mark;
    private double attestation1;
    private double attestation2;
    private double finalExam;
    private double total;

    public Mark(double mark, double attestation1, double attestation2, double finalExam, double total) {
        this.mark = mark;
        this.attestation1 = attestation1;
        this.attestation2 = attestation2;
        this.finalExam = finalExam;
        this.total = total;
    }

    public double getMark() {
        return mark;
    }

    public double getAttestation1() {
        return attestation1;
    }

    public double getAttestation2() {
        return attestation2;
    }

    public double getFinalExam() {
        return finalExam;
    }

    public double getTotal() {
        return total;
    }

    public void setMark(int mark) {
        this.mark = mark;
    }

    public void setAttestation1(int attestation1) {
        this.attestation1 = attestation1;
    }

    public void setAttestation2(int attestation2) {
        this.attestation2 = attestation2;
    }

    public void setFinalExam(int finalExam) {
        this.finalExam = finalExam;
    }

    public void setTotal(int total) {
        this.total = total;
    }

    public double calculateTotal() {
        return attestation1 + attestation2 + finalExam;
    }

    public boolean hasPassed() {
        return total >= 50;
    }
}
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class Manager {
    private String id;
    private String name;
    private String email;
    private String department;

    public Manager(String id, String name, String email, String department) {
        this.id = id;
        this.name = name;
        this.email = email;
        this.department = department;
    }

    public void approveRegistration(Student student, Course course) {
        String query = "INSERT INTO course_registrations (student_id, course_id) VALUES (?, ?)";

        try (Connection connection = DBConnection.getConnection();
             PreparedStatement pstmt = connection.prepareStatement(query)) {

            pstmt.setString(1, student.getId());
            pstmt.setString(2, course.getId());
            pstmt.executeUpdate();
            System.out.println("Registration approved for student " + student.getFirstName() + " in course " + course.getName());

        } catch (SQLException e) {
            System.out.println("Error approving registration.");
            e.printStackTrace();
        }
    }

    public void assignCourse(Teacher teacher, Course course) {
        String query = "INSERT INTO teacher_courses (teacher_id, course_id) VALUES (?, ?)";

        try (Connection connection = DBConnection.getConnection();
             PreparedStatement pstmt = connection.prepareStatement(query)) {

            pstmt.setString(1, teacher.getId());
            pstmt.setString(2, course.getId());
            pstmt.executeUpdate();
            System.out.println("Course " + course.getName() + " assigned to teacher " + teacher.getName());

        } catch (SQLException e) {
            System.out.println("Error assigning course.");
            e.printStackTrace();
        }
    }

    public void manageNews(News news) {
        String query = "INSERT INTO news (content) VALUES (?)";

        try (Connection connection = DBConnection.getConnection();
             PreparedStatement pstmt = connection.prepareStatement(query)) {

            pstmt.setString(1, news.getContent());
            pstmt.executeUpdate();
            System.out.println("News article published: " + news.getContent());

        } catch (SQLException e) {
            System.out.println("Error managing news.");
            e.printStackTrace();
        }
    }









    public String getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public String getEmail() {
        return email;
    }

    public String getDepartment() {
        return department;
    }

    public void setId(String id) {
        this.id = id;
    }

    public void setName(String name) {
        this.name = name;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public void setDepartment(String department) {
        this.department = department;
    }
}
import java.sql.*;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

public class Librarian {
    private String id;
    private String name;

    // Constructor
    public Librarian() {}

    public Librarian(String id, String name) {
        this.id = id;
        this.name = name;
    }

    // Add a book to the library (database)
    public void addBook(Book book) {
        try (Connection connection = DBConnection.getConnection()) {
            book.saveToDatabase();
            System.out.println("Book added successfully.");
        } catch (SQLException e) {
            System.err.println("Error adding book: " + e.getMessage());
        }
    }

    // Remove a book from the library (database)
    public void removeBook(String code) {
        try (Connection connection = DBConnection.getConnection()) {
            Book book = Book.fetchFromDatabase(code);
            if (book != null) {
                book.deleteFromDatabase();
                System.out.println("Book removed successfully.");
            } else {
                System.out.println("Book not found.");
            }
        } catch (SQLException e) {
            System.err.println("Error removing book: " + e.getMessage());
        }
    }

    // Borrow a book
    public void borrowBook(String code, String studentId, LocalDate dueDate) {
        try (Connection connection = DBConnection.getConnection()) {
            Book book = Book.fetchFromDatabase(code);
            if (book != null && book.getIsAvailable()) {
                String sql = "INSERT INTO BorrowedBooks (book_code, student_id, borrow_date, due_date) VALUES (?, ?, ?, ?)";
                try (PreparedStatement stmt = connection.prepareStatement(sql)) {
                    stmt.setString(1, code);
                    stmt.setString(2, studentId);
                    stmt.setDate(3, Date.valueOf(LocalDate.now()));
                    stmt.setDate(4, Date.valueOf(dueDate));
                    stmt.executeUpdate();

                    book.markAsBorrowed();
                    book.updateAvailabilityInDatabase();

                    System.out.println("Book borrowed successfully.");
                }
            } else {
                System.out.println("Book is not available.");
            }
        } catch (SQLException e) {
            System.err.println("Error borrowing book: " + e.getMessage());
        }
    }

    // Return a book
    public void returnBook(String code, String studentId) {
        try (Connection connection = DBConnection.getConnection()) {
            String sql = "DELETE FROM BorrowedBooks WHERE book_code = ? AND student_id = ?";
            try (PreparedStatement stmt = connection.prepareStatement(sql)) {
                stmt.setString(1, code);
                stmt.setString(2, studentId);
                int rows = stmt.executeUpdate();

                if (rows > 0) {
                    Book book = Book.fetchFromDatabase(code);
                    if (book != null) {
                        book.markAsReturned();
                        book.updateAvailabilityInDatabase();
                    }
                    System.out.println("Book returned successfully.");
                } else {
                    System.out.println("No record of this book being borrowed by the student.");
                }
            }
        } catch (SQLException e) {
            System.err.println("Error returning book: " + e.getMessage());
        }
    }

    // List all books in the library
    public List<Book> listBooks() {
        List<Book> books = new ArrayList<>();
        try (Connection connection = DBConnection.getConnection()) {
            String sql = "SELECT * FROM Books";
            try (Statement stmt = connection.createStatement(); ResultSet rs = stmt.executeQuery(sql)) {
                while (rs.next()) {
                    String title = rs.getString("title");
                    String author = rs.getString("author");
                    String code = rs.getString("code");
                    boolean isAvailable = rs.getBoolean("is_available");

                    Book book = new Book(title, author, code);
                    book.setAvailable(isAvailable);
                    books.add(book);
                }
            }
        } catch (SQLException e) {
            System.err.println("Error listing books: " + e.getMessage());
        }
        return books;
    }

    // Get borrowing history of a specific student
    public List<String> getBorrowingHistory(String studentId) {
        List<String> history = new ArrayList<>();
        try (Connection connection = DBConnection.getConnection()) {
            String sql = "SELECT book_code, borrow_date, due_date FROM BorrowedBooks WHERE student_id = ?";
            try (PreparedStatement stmt = connection.prepareStatement(sql)) {
                stmt.setString(1, studentId);
                try (ResultSet rs = stmt.executeQuery()) {
                    while (rs.next()) {
                        String bookCode = rs.getString("book_code");
                        LocalDate borrowDate = rs.getDate("borrow_date").toLocalDate();
                        LocalDate dueDate = rs.getDate("due_date").toLocalDate();

                        history.add(String.format("Book Code: %s, Borrow Date: %s, Due Date: %s", bookCode, borrowDate, dueDate));
                    }
                }
            }
        } catch (SQLException e) {
            System.err.println("Error fetching borrowing history: " + e.getMessage());
        }
        return history;
    }

    @Override
    public String toString() {
        return "Librarian{" +
                "id='" + id + '\'' +
                ", name='" + name + '\'' +
                '}';
    }
}
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class Lesson {
    private String topic;
    private Date date;
    private String room;

    public Lesson(String topic, Date date, String room) {
        this.topic = topic;
        this.date = date;
        this.room = room;
    }

    public String getDetails() {
        return "Topic: " + topic + ", Date: " + date + ", Room: " + room;
    }

    // Getters and Setters
    public String getTopic() {
        return topic;
    }

    public void setTopic(String topic) {
        this.topic = topic;
    }

    public Date getDate() {
        return date;
    }

    public void setDate(Date date) {
        this.date = date;
    }

    public String getRoom() {
        return room;
    }

    public void setRoom(String room) {
        this.room = room;
    }

    // JDBC Methods
    public static void addLesson(Lesson lesson) {
        String insertQuery = "INSERT INTO lessons (topic, date, room) VALUES (?, ?, ?)";

        try (Connection connection = DBConnection.getConnection();
             PreparedStatement pstmt = connection.prepareStatement(insertQuery)) {

            pstmt.setString(1, lesson.getTopic());
            pstmt.setDate(2, lesson.getDate());
            pstmt.setString(3, lesson.getRoom());

            int rows = pstmt.executeUpdate();
            if (rows > 0) {
                System.out.println("Lesson added successfully.");
            }
        } catch (SQLException e) {
            System.out.println("Failed to add lesson.");
            e.printStackTrace();
        }
    }

    public static List<Lesson> getAllLessons() {
        List<Lesson> lessons = new ArrayList<>();
        String selectQuery = "SELECT * FROM lessons";

        try (Connection connection = DBConnection.getConnection();
             PreparedStatement pstmt = connection.prepareStatement(selectQuery);
             ResultSet rs = pstmt.executeQuery()) {

            while (rs.next()) {
                Lesson lesson = new Lesson(
                        rs.getString("topic"),
                        rs.getDate("date"),
                        rs.getString("room")
                );
                lessons.add(lesson);
            }

        } catch (SQLException e) {
            System.out.println("Failed to retrieve lessons.");
            e.printStackTrace();
        }

        return lessons;
    }

    public static void updateLesson(String topic, Lesson updatedLesson) {
        String updateQuery = "UPDATE lessons SET topic = ?, date = ?, room = ? WHERE topic = ?";

        try (Connection connection = DBConnection.getConnection();
             PreparedStatement pstmt = connection.prepareStatement(updateQuery)) {

            pstmt.setString(1, updatedLesson.getTopic());
            pstmt.setDate(2, updatedLesson.getDate());
            pstmt.setString(3, updatedLesson.getRoom());
            pstmt.setString(4, topic);

            int rows = pstmt.executeUpdate();
            if (rows > 0) {
                System.out.println("Lesson updated successfully.");
            } else {
                System.out.println("Lesson not found.");
            }

        } catch (SQLException e) {
            System.out.println("Failed to update lesson.");
            e.printStackTrace();
        }
    }

    public static void deleteLesson(String topic) {
        String deleteQuery = "DELETE FROM lessons WHERE topic = ?";

        try (Connection connection = DBConnection.getConnection();
             PreparedStatement pstmt = connection.prepareStatement(deleteQuery)) {

            pstmt.setString(1, topic);

            int rows = pstmt.executeUpdate();
            if (rows > 0) {
                System.out.println("Lesson deleted successfully.");
            } else {
                System.out.println("Lesson not found.");
            }

        } catch (SQLException e) {
            System.out.println("Failed to delete lesson.");
            e.printStackTrace();
        }
    }
}
public enum Format {
    BIB_TEX, PLAIN_TEXT;
}
public class Employee {
    private String id;
    private String firstName;
    private String lastName;
    private double salary;
    private String department;

    public Employee(String id, String firstName, String lastName, double salary, String department) {
        this.id = id;
        this.firstName = firstName;
        this.lastName = lastName;
        this.salary = salary;
        this.department = department;
    }

    public String getId() {
        return id;
    }

    public String getFirstName() {
        return firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public double getSalary() {
        return salary;
    }

    public String getDepartment() {
        return department;
    }

    public void setId(String id) {
        this.id = id;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public void setSalary(double salary) {
        this.salary = salary;
    }

    public void setDepartment(String department) {
        this.department = department;
    }
}
import java.io.InputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.Properties;

public class DBConnection {
    private static Connection connection;

    public static Connection getConnection() {
        try {
            if (connection == null || connection.isClosed()) {
                Properties properties = new Properties();
                InputStream input = DBConnection.class.getClassLoader().getResourceAsStream("db.properties");
                if (input == null) {
                    throw new RuntimeException("Properties file not found in the classpath");
                }
                properties.load(input);

                String url = properties.getProperty("db.url");
                String user = properties.getProperty("db.username");
                String password = properties.getProperty("db.password");

                System.out.println("Trying to database connection...");
                connection = DriverManager.getConnection(url, user, password);
                System.out.println("Database connected successfully.");
            }
        } catch (Exception e) {
            e.printStackTrace();
            throw new RuntimeException("Failed to connect database");
        }
        return connection;
    }

    public static void closeConnection() {
        try {
            if (connection != null && !connection.isClosed()) {
                connection.close();
                System.out.println("Database connection closed.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}
public enum CourseType {
    MAJOR, MINOR, FREE;
}
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class Course {
    private String id;
    private String name;
    private int credits;
    private CourseType type;
    private List<Teacher> instructors;
    private List<Student> enrolledStudents;
    private List<Lesson> lessons;

    // Constructor
    public Course(String id, String name, int credits) {
        this.id = id;
        this.name = name;
        this.credits = credits;
        this.instructors = new ArrayList<>();
        this.enrolledStudents = new ArrayList<>();
        this.lessons = new ArrayList<>();
    }

    public String getId() {
        return id;
    }

    public void setId(String courseId) {
        this.id = courseId;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getCredits() {
        return credits;
    }

    public void setCredits(int credits) {
        this.credits = credits;
    }

    public CourseType getType() {
        return type;
    }

    public void setType(CourseType type) {
        this.type = type;
    }

    public List<Teacher> getInstructors() {
        return instructors;
    }

    public void setInstructors(List<Teacher> instructors) {
        this.instructors = instructors;
    }

    public List<Student> getEnrolledStudents() {
        return enrolledStudents;
    }

    public void setEnrolledStudents(List<Student> enrolledStudents) {
        this.enrolledStudents = enrolledStudents;
    }

    public List<Lesson> getLessons() {
        return lessons;
    }

    public void setLessons(List<Lesson> lessons) {
        this.lessons = lessons;
    }

    // JDBC Methods
    public void addStudent(Student student) {
        // Validate course availability and add student if possible
        if (!isFull()) {
            String insertQuery = "INSERT INTO course_registrations (student_id, course_id) VALUES (?, ?)";

            try (Connection connection = DBConnection.getConnection();
                 PreparedStatement pstmt = connection.prepareStatement(insertQuery)) {

                pstmt.setString(1, student.getId());
                pstmt.setString(2, this.id);
                pstmt.executeUpdate();

                System.out.println("Student " + student.getFirstName() + " " + student.getLastName() + " enrolled in " + name);

            } catch (SQLException e) {
                System.out.println("Error adding student to the course.");
                e.printStackTrace();
            }
        } else {
            System.out.println("Course " + name + " is full, cannot add student.");
        }
    }

    public void removeStudent(Student student) {
        // Remove student from the course
        String removeQuery = "DELETE FROM course_registrations WHERE student_id = ? AND course_id = ?";

        try (Connection connection = DBConnection.getConnection();
             PreparedStatement pstmt = connection.prepareStatement(removeQuery)) {

            pstmt.setString(1, student.getId());
            pstmt.setString(2, this.id);
            int rowsAffected = pstmt.executeUpdate();

            if (rowsAffected > 0) {
                System.out.println("Student " + student.getFirstName() + " " + student.getLastName() + " removed from " + name);
            } else {
                System.out.println("Student not enrolled in the course.");
            }

        } catch (SQLException e) {
            System.out.println("Error removing student from the course.");
            e.printStackTrace();
        }
    }

    public boolean isFull() {
        String checkAvailabilityQuery = "SELECT available_slots FROM courses WHERE course_id = ?";

        try (Connection connection = DBConnection.getConnection();
             PreparedStatement pstmt = connection.prepareStatement(checkAvailabilityQuery)) {

            pstmt.setString(1, this.id);
            ResultSet rs = pstmt.executeQuery();

            if (rs.next()) {
                int availableSlots = rs.getInt("available_slots");
                return availableSlots <= 0;
            }

        } catch (SQLException e) {
            System.out.println("Error checking course availability.");
            e.printStackTrace();
        }

        return true; // Default to full if an error occurs
    }

    // Update available slots after a student registers
    public void updateAvailableSlots() {
        String updateSlotsQuery = "UPDATE courses SET available_slots = available_slots - 1 WHERE course_id = ?";

        try (Connection connection = DBConnection.getConnection();
             PreparedStatement pstmt = connection.prepareStatement(updateSlotsQuery)) {

            pstmt.setString(1, this.id);
            pstmt.executeUpdate();

        } catch (SQLException e) {
            System.out.println("Error updating available slots.");
            e.printStackTrace();
        }
    }
}
public enum Complaint {
    LOW, MID, HIGH;
}
import java.sql.*;

public class Book {
    private String title;
    private String author;
    private String code;
    private boolean isAvailable;

    // Constructor
    public Book(String title, String author, String code) {
        this.title = title;
        this.author = author;
        this.code = code;
        this.isAvailable = true; // Default to available when created
    }

    // Getters
    public String getTitle() {
        return title;
    }

    public String getAuthor() {
        return author;
    }

    public String getCode() {
        return code;
    }

    public boolean getIsAvailable() {
        return isAvailable;
    }

    // Setters
    public void setAvailable(boolean available) {
        isAvailable = available;
    }

    // Mark as borrowed
    public void markAsBorrowed() {
        isAvailable = false;
    }

    // Mark as returned
    public void markAsReturned() {
        isAvailable = true;
    }

    // JDBC Methods

    // Save book to the database
    public void saveToDatabase() throws SQLException {
        String sql = "INSERT INTO Books (title, author, code, is_available) VALUES (?, ?, ?, ?)";
        try (Connection connection = DBConnection.getConnection();
             PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setString(1, title);
            stmt.setString(2, author);
            stmt.setString(3, code);
            stmt.setBoolean(4, isAvailable);
            stmt.executeUpdate();
        }
    }

    // Fetch book from the database
    public static Book fetchFromDatabase(String code) throws SQLException {
        String sql = "SELECT * FROM Books WHERE code = ?";
        try (Connection connection = DBConnection.getConnection();
             PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setString(1, code);
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    String title = rs.getString("title");
                    String author = rs.getString("author");
                    String bookCode = rs.getString("code");
                    boolean isAvailable = rs.getBoolean("is_available");
                    Book book = new Book(title, author, bookCode);
                    book.setAvailable(isAvailable);
                    return book;
                }
            }
        }
        return null;
    }

    // Update availability in the database
    public void updateAvailabilityInDatabase() throws SQLException {
        String sql = "UPDATE Books SET is_available = ? WHERE code = ?";
        try (Connection connection = DBConnection.getConnection();
             PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setBoolean(1, isAvailable);
            stmt.setString(2, code);
            stmt.executeUpdate();
        }
    }

    // Delete book from the database
    public void deleteFromDatabase() throws SQLException {
        String sql = "DELETE FROM Books WHERE code = ?";
        try (Connection connection = DBConnection.getConnection();
             PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setString(1, code);
            stmt.executeUpdate();
        }
    }
}
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

public class AuthService {
    private User loggedInUser;

    public boolean login(String username, String password, String role) {
        try (Connection connection = DBConnection.getConnection()) {
            String query = "SELECT * FROM users WHERE username = ? AND password = ? AND role = ?";
            PreparedStatement statement = connection.prepareStatement(query);

            statement.setString(1, username.trim());
            statement.setString(2, password.trim());
            statement.setString(3, role.trim());

            System.out.println("Attempting to log in with username: " + username + ", role: " + role);
            ResultSet rs = statement.executeQuery();

            if (rs.next()) {
                loggedInUser = new User(
                        rs.getString("id"),
                        rs.getString("userName"),
                        rs.getString("password"),
                        rs.getString("role")
                );
                return true;
            } else {
                System.out.println("Invalid credentials or role.");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return false;
    }

    public void logout() {
        loggedInUser = null;
        DBConnection.closeConnection();
    }

    public boolean isLoggedIn() {
        return loggedInUser != null;
    }

    public User getLoggedInUser() {
        return loggedInUser;
    }
}
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;

public class Admin {
    private List<User> users;

    public void addUser(List<User> users) {
        String insertQuery = "INSERT INTO users (id, username, email, password, role) VALUES (?, ?, ?, ?, ?)";

        try (Connection connection = DBConnection.getConnection()) {
            connection.setAutoCommit(false);

            try (PreparedStatement pstmt = connection.prepareStatement(insertQuery)) {
                for (User user : users) {

                    pstmt.setString(1, user.getId());
                    pstmt.setString(2, user.getUserName());
                    pstmt.setString(3, user.getEmail());
                    pstmt.setString(4, user.getPassword());
                    pstmt.setString(5, user.getRole());
                    pstmt.addBatch();
                }

                pstmt.executeBatch();
                connection.commit();
                System.out.println("Users added successfully.");
            } catch (Exception e) {
                connection.rollback();
                System.out.println("Error adding users. Transaction rolled back.");
                e.printStackTrace();
            } finally {
                connection.setAutoCommit(true);
            }
        } catch (Exception e) {
            System.out.println("Failed to add users.");
            e.printStackTrace();
        }
    }

    public void removeUser(User user) {
        String deleteQuery = "DELETE FROM users WHERE username = ?";

        try (Connection connection = DBConnection.getConnection();
             PreparedStatement pstmt = connection.prepareStatement(deleteQuery)) {

            pstmt.setString(1, user.getUserName());
            int affectedRows = pstmt.executeUpdate();

            if (affectedRows > 0) {
                System.out.println("User " + user.getUserName() + " removed successfully.");
            } else {
                System.out.println("User " + user.getUserName() + " not found.");
            }

        } catch (Exception e) {
            System.out.println("Failed to remove user.");
            e.printStackTrace();
        }
    }

    public List<User> getUsers() {
        List<User> users = new ArrayList<>();
        String selectQuery = "SELECT * FROM users";

        try (Connection connection = DBConnection.getConnection();
             PreparedStatement pstmt = connection.prepareStatement(selectQuery);
             ResultSet rs = pstmt.executeQuery()) {

            while (rs.next()) {
                User user = new User(
                        rs.getString("id"),
                        rs.getString("userName"),
                        rs.getString("email"),
                        rs.getString("password"),
                        rs.getString("role")
                );
                users.add(user);
            }

        } catch (Exception e) {
            System.out.println("Failed to retrieve users.");
            e.printStackTrace();
        }

        return users;
    }

    public void updateUser(User updatedUser) {
        String updateQuery = "UPDATE users SET username = ?, email = ?, password = ?, role = ? WHERE id = ?";

        try (Connection connection = DBConnection.getConnection();
             PreparedStatement pstmt = connection.prepareStatement(updateQuery)) {

            pstmt.setString(1, updatedUser.getId());
            pstmt.setString(2, updatedUser.getUserName());
            pstmt.setString(3, updatedUser.getEmail());
            pstmt.setString(4, updatedUser.getPassword());
            pstmt.setString(5, updatedUser.getRole());

            int affectedRows = pstmt.executeUpdate();
            if (affectedRows > 0) {
                System.out.println("User " + updatedUser.getUserName() + " updated successfully.");
            } else {
                System.out.println("User not found.");
            }

        } catch (Exception e) {
            System.out.println("Failed to update user.");
            e.printStackTrace();
        }
    }

}
